{"version":3,"sources":["Die.js","RollDice.js","App.js","serviceWorker.js","index.js"],"names":["Die","dieClass","this","props","value","isRolling","className","React","Component","defaultProps","RollDice","state","getDieState","handleClick","bind","dieList","dieValues","count","i","idx","Math","floor","random","push","key","setState","setTimeout","dieItems","map","item","style","textAlign","disabled","onClick","App","data-testid","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6TAGMA,G,6KAME,IAAMC,EAAW,mBAAqBC,KAAKC,MAAMC,OAASF,KAAKC,MAAME,UAAY,eAAiB,IAClG,OACI,uBAAGC,UAAWL,Q,GARRM,IAAMC,YAAlBR,EACKS,aAAe,CAClBL,MAAO,MACPC,WAAW,GAUJL,QCZTU,G,wDAKF,WAAYP,GAAQ,IAAD,8BACf,cAAMA,IACDQ,MAAQ,EAAKC,cAClB,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBAHJ,E,0DAUf,IAHA,IAAMC,EAAU,GACVC,EAAY,CAAC,MAAO,MAAO,QAAS,OAAQ,OAAQ,OACpDC,EAAQf,KAAKC,MAAMc,MAChBC,EAAI,EAAGA,EAAID,EAAOC,IAAK,CAC5B,IAAMC,EAAMC,KAAKC,MAAsB,EAAhBD,KAAKE,UAC5BP,EAAQQ,KAAK,CAAEC,IAAKN,EAAGd,MAAOY,EAAUG,KAE5C,MAAO,CAAEJ,a,oCAGE,IAAD,OACVb,KAAKuB,SAAL,aAAgBpB,WAAW,GAASH,KAAKU,gBACzCc,YAAW,WACP,EAAKD,SAAS,CAAEpB,WAAW,MAC5B,Q,+BAGG,IAAD,OACCsB,EAAWzB,KAAKS,MAAMI,QAAQa,KAAI,SAAAC,GAAI,OAAI,kBAAC,EAAD,CAAKL,IAAKK,EAAKL,IAAKpB,MAAOyB,EAAKzB,MAAOC,UAAW,EAAKM,MAAMN,eAC7G,OACI,yBAAKC,UAAU,YACX,yBAAKwB,MAAO,CAAEC,UAAW,WACpBJ,GAEL,4BAAQrB,UAAU,kBAAkB0B,SAAU9B,KAAKS,MAAMN,UAAW4B,QAAS/B,KAAKW,aAAcX,KAAKS,MAAMN,UAAY,kBAAoB,kB,GApCpIE,IAAMC,YAAvBE,EACKD,aAAe,CAClBQ,MAAO,GAwCAP,QChCAwB,G,6KARX,OACE,yBAAKC,cAAY,MAAM7B,UAAU,OAC/B,kBAAC,EAAD,CAAUW,MAAO,S,GAJPV,IAAMC,YCQJ4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b541ec41.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Die.css';\r\n\r\nclass Die extends React.Component {\r\n    static defaultProps = {\r\n        value: 'one',\r\n        isRolling: false\r\n    };\r\n    render() {\r\n        const dieClass = 'Die fas fa-dice-' + this.props.value + (this.props.isRolling ? ' Die-rolling' : '');\r\n        return (\r\n            <i className={dieClass}></i>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Die;","import React from 'react';\r\nimport Die from './Die';\r\nimport './RollDice.css';\r\n\r\nclass RollDice extends React.Component {\r\n    static defaultProps = {\r\n        count: 1\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = this.getDieState();\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    getDieState() {\r\n        const dieList = [];\r\n        const dieValues = ['one', 'two', 'three', 'four', 'five', 'six'];\r\n        const count = this.props.count;\r\n        for (let i = 0; i < count; i++) {\r\n            const idx = Math.floor(Math.random() * 6);\r\n            dieList.push({ key: i, value: dieValues[idx] });\r\n        }\r\n        return { dieList };\r\n    }\r\n\r\n    handleClick() {\r\n        this.setState({ isRolling: true, ...this.getDieState() });\r\n        setTimeout(() => {\r\n            this.setState({ isRolling: false });\r\n        }, 1500);\r\n    }\r\n\r\n    render() {\r\n        const dieItems = this.state.dieList.map(item => <Die key={item.key} value={item.value} isRolling={this.state.isRolling} />);\r\n        return (\r\n            <div className='RollDice'>\r\n                <div style={{ textAlign: 'center' }}>\r\n                    {dieItems}\r\n                </div>\r\n                <button className='RollDice-button' disabled={this.state.isRolling} onClick={this.handleClick}>{this.state.isRolling ? 'Dice Rolling...' : 'Roll Dice'}</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default RollDice;","import React from 'react';\nimport RollDice from './RollDice';\nimport './App.css';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div data-testid='app' className='App'>\n        <RollDice count={2} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}